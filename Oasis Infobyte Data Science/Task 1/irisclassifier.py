# -*- coding: utf-8 -*-
"""irisclassifier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XI6wkVO3THKVNF3oEfWZFvLkGu3qgMJP

# **Iris Flower Classification**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder

"""## *Extracting the dataset from csv file*"""

iris_dataset = pd.read_csv('Iris.csv')
iris_dataset.head(15)

"""## *Checking for null values and encoding data*"""

iris_dataset.info()
iris_dataset.describe()
species_names = iris_dataset['Species'].unique().copy()
print(species_names)
encoder = LabelEncoder()
iris_dataset['Species'] = encoder.fit_transform(iris_dataset['Species'])
iris_dataset

"""## *Estimating the amount of each type of iris flower*"""

iris_counts = []
for i in range(len(iris_dataset['Species'].unique())):
    iris_counts.append(iris_dataset[iris_dataset['Species'] == i].shape[0])
iris_counts
plt.pie(iris_counts, labels=species_names, autopct='%1.1f%%', startangle=90)
plt.show()

"""## *Extracting features and target, and splitting dataset for training and testing*"""

features = iris_dataset.drop(['Species','Id'], axis='columns')
target = iris_dataset['Species']
feature_train, feature_test, target_train, target_test = train_test_split(features, target, test_size=0.2)

"""## *Training the SVM model and performing predictions with test dataset*"""

model = KNeighborsClassifier(n_neighbors=4)
model.fit(feature_train, target_train)
target_pred = model.predict(feature_test)
print(target_test, target_pred)

"""## *Plotting the testing data classification and predicted data classification*"""

plt.figure(figsize=(16, 12))
# Plotting regression plot before application of classification on test dataset
plt.subplot(2, 2, 1)
plt.scatter(feature_test['SepalLengthCm'], feature_test['SepalWidthCm'], c=target_test)
plt.title("Testing Data")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Sepal Width (cm)")

plt.subplot(2, 2, 3)
plt.scatter(feature_test['PetalLengthCm'], feature_test['PetalWidthCm'], c=target_test)
plt.title("Testing Data")
plt.xlabel("Petal Length (cm)")
plt.ylabel("Petal Width (cm)")

# Plotting regression plot after application of classification on test dataset
plt.subplot(2, 2, 2)
plt.scatter(feature_test['SepalLengthCm'], feature_test['SepalWidthCm'], c=target_pred)
plt.title("Predicted Data")
plt.xlabel("Sepal Length (cm)")
plt.ylabel("Sepal Width (cm)")

plt.subplot(2, 2, 4)
plt.scatter(feature_test['PetalLengthCm'], feature_test['PetalWidthCm'], c=target_pred)
plt.title("Predicted Data")
plt.xlabel("Petal Length (cm)")
plt.ylabel("Petal Width (cm)")

plt.show()

"""## *Estimating accuracy of model in classification*"""

accuracy = accuracy_score(target_test, target_pred)
print("Accuracy of the classification model is : {:.2f} %".format(accuracy * 100))

"""## *Predicting iris species based on user inputs for the features*"""

sepal_length, sepal_width = input("Enter the length and width of sepal in cm : ").split()
petal_length, petal_width = input("Enter the length and width of petal in cm : ").split()
inp_dataframe = pd.DataFrame({ 'SepalLengthCm' : [float(sepal_length)], 'SepalWidthCm' : [float(sepal_width)],
                              'PetalLengthCm' : [float(petal_length)], 'PetalWidthCm' : [float(petal_width)] })
pred_species = model.predict(inp_dataframe)
print("Given iris flower belongs to", species_names[pred_species[0]], "species")