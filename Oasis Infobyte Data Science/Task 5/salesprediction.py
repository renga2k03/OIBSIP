# -*- coding: utf-8 -*-
"""salesprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CFObLD-B3ltPJKhVmOKcF92pKtGvnE8U

# **Sales Prediction**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, LabelEncoder

"""## *Extracting the dataset from csv file*"""

sales_dataset = pd.read_csv('Advertising.csv')
sales_dataset.head(15)

"""## *Getting statistical information from the dataset*"""

sales_dataset.info()
sales_dataset.drop('Unnamed: 0', axis=1, inplace=True)
sales_dataset.describe()

"""## *Extracting the features and target value, and splitting dataset for training and testing*"""

features = sales_dataset.drop('Sales', axis=1)
target = sales_dataset['Sales']
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

"""## *Training the model and performing predictions on test data*"""

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

"""## *Plotting features vs target for test data and predicted data*"""

plt.figure(figsize=(16, 12))
# Plotting regression plot with test dataset
plt.subplot(3, 2, 1)
plt.scatter(X_test['TV'], y_test)
plt.title("Testing Data")
plt.xlabel("TV")
plt.ylabel("Sales")

plt.subplot(3, 2, 3)
plt.scatter(X_test['Radio'], y_test)
plt.title("Testing Data")
plt.xlabel("Radio")
plt.ylabel("Sales")

plt.subplot(3, 2, 5)
plt.scatter(X_test['Newspaper'], y_test)
plt.title("Testing Data")
plt.xlabel("Newspaper")
plt.ylabel("Sales")

# Plotting regression plot with predicted data
plt.subplot(3, 2, 2)
plt.scatter(X_test['TV'], y_pred)
plt.title("Predicted Data")
plt.xlabel("TV")
plt.ylabel("Sales")

plt.subplot(3, 2, 4)
plt.scatter(X_test['Radio'], y_pred)
plt.title("Predicted Data")
plt.xlabel("Radio")
plt.ylabel("Sales")

plt.subplot(3, 2, 6)
plt.scatter(X_test['Newspaper'], y_pred)
plt.title("Predicted Data")
plt.xlabel("Newspaper")
plt.ylabel("Sales")

plt.show()

"""## *Calculating error metrics and plotting predicted sales against actual sales*"""

mse = mean_squared_error(y_test, y_pred)
print("Mean Squared Error :", mse)
r2 = r2_score(y_test, y_pred)
print("R-squared :", r2)
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Sales")
plt.ylabel("Predicted Sales")
plt.title("Predicted Sales vs Actual Sales")
plt.show()